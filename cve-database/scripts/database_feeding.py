#  -------- copyright holders --------

#  This file is part of Dynamic Attack Graph GEneRator - DAGGER.

#  Dynamic Attack Graph GEneRator - DAGGER is free software; you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.

#  Dynamic Attack Graph GEneRator - DAGGER is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.

#  You should have received a copy of the GNU Lesser General Public License
#  along with Dynamic Attack Graph GEneRator - DAGGER; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


from os import listdir
from os.path import isfile, join
from lxml import etree
import json
import re
import mysql.connector

class DatabaseFeeder :
    """This class allow to parse CVE and CWE files comming from NVD, CVE details and MITRE, and then fill a MYSQL database with relevant data"""
    def __init__(self):
        self.interpreted = ['python', 'java', 'javascript', 'php', 'r', 'objective-c', 'matlab', 'typescript', 'ruby', 'kotlin', 'vba', 'scala', 'visual_basic', 'perl', 'lua', 'haskell']
        self.compiled = ['csharp', 'c_cpp', 'objective-c', 'swift', 'ruby', 'go', 'scala', 'rust', 'perl', 'haskell', 'delphi', 'julia']
        self.language = list(set(self.interpreted) | set(self.compiled))
        self.cwe_list = {}
        self.cve_list = {}

    def getCWEList(self):
        return self.cwe_list

    def setCWEList(self, list):
        self.cwe_list = list.copy()

    cwe = property(getCWEList, setCWEList)

    def getCVEList(self):
        return self.cve_list

    def setCVEList(self, list):
        self.cve_list = list.copy()

    cve = property(getCVEList, setCVEList)

    def getDirFiles(self, dir):
        """Get all files recursively from a directory"""
        files = [join(dir, f) for f in listdir(dir) if isfile(join(dir, f))]
        for subdir in [f for f in listdir(dir) if not isfile(join(dir, f))]:
            files += self.getDirFiles(dir + "/" + subdir)
        return files

    def union(self, lst1, lst2):
        """Union of two list without duplicate"""
        final_list = list(set(lst1) | set(lst2))
        return final_list

    def parseCWE(self, path):
        """Parse the MITRE json files to extract relevant informations"""
        tree = etree.parse(path)

        for weakness in tree.xpath("//ns:Weakness", namespaces={'ns' : "http://cwe.mitre.org/cwe-6"}):
            cwe_data = {"id": "", "name": "", "description": "", "language": [], "paradigm": [], "technology": [], "os": []}
            for attrib in weakness.attrib:
                if (attrib == 'ID'):
                    cwe_data["id"] = 'CWE-' + weakness.attrib[attrib]

                if (attrib == "Name"):
                    cwe_data["name"] = weakness.attrib[attrib]

            for child in weakness.getchildren():
                if (child.tag == "{http://cwe.mitre.org/cwe-6}Description"):
                    cwe_data["description"] = child.text

                if (child.tag == "{http://cwe.mitre.org/cwe-6}Applicable_Platforms"):
                    for grandchild in child.getchildren():
                        if (grandchild.tag == "{http://cwe.mitre.org/cwe-6}Language"):
                            for attrib in grandchild.attrib:
                                if(attrib == "Class" or attrib == "Name"):
                                    if(grandchild.attrib[attrib] == "Interpreted"):
                                        cwe_data["language"] = self.union(cwe_data["language"], self.interpreted)
                                    elif(grandchild.attrib[attrib] == "Compiled"):
                                        cwe_data["language"] = self.union(cwe_data["language"], self.compiled)
                                    elif(grandchild.attrib[attrib] == "Language-Independent"):
                                        cwe_data["language"] = self.union(cwe_data["language"], self.language)
                                    elif (grandchild.attrib[attrib] == "Python"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["python"])
                                    elif (grandchild.attrib[attrib] == "Java"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["java"])
                                    elif (grandchild.attrib[attrib] == "JavaScript"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["javascript"])
                                    elif (grandchild.attrib[attrib] == "PHP"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["php"])
                                    elif (grandchild.attrib[attrib] == "ASP.NET"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["csharp", "javascript"])
                                    elif (grandchild.attrib[attrib] == "Perl"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["perl"])
                                    elif (grandchild.attrib[attrib] == "Ruby"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["ruby"])
                                    elif (grandchild.attrib[attrib] == "C" or grandchild.attrib[attrib] == "C++"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["c_cpp"])
                                    elif (grandchild.attrib[attrib] == "C#"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["csharp"])
                                    elif (grandchild.attrib[attrib] == "C#"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["csharp"])
                                    elif (grandchild.attrib[attrib] == "XML"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["xml"])
                                    elif (grandchild.attrib[attrib] == "SQL"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["sql"])
                                    elif (grandchild.attrib[attrib] == "Assembly"):
                                        cwe_data["language"] = self.union(cwe_data["language"], ["assembly"])

                        elif (grandchild.tag == "{http://cwe.mitre.org/cwe-6}Paradigm"):
                            for attrib in grandchild.attrib:
                                if(attrib == "Name"):
                                    if(grandchild.attrib[attrib] == "Mobile"):
                                        cwe_data["paradigm"] += ["mobile"]
                                    elif(grandchild.attrib[attrib] == "Web Based"):
                                        cwe_data["paradigm"] += ["web_based"]
                                    elif (grandchild.attrib[attrib] == "Client Server"):
                                        cwe_data["paradigm"] += ["client_server"]
                                    elif (grandchild.attrib[attrib] == "Concurrent Systems Operating on Shared Resources"):
                                        cwe_data["paradigm"] += ["concurrent_systems_operating_on_shared_resources"]

                        elif (grandchild.tag == "{http://cwe.mitre.org/cwe-6}Technology"):
                            for attrib in grandchild.attrib:
                                if(attrib == "Name"):
                                    if(grandchild.attrib[attrib] == "Web Server"):
                                        cwe_data["technology"] = ["web_server"]
                                    elif(grandchild.attrib[attrib] == "Database Server"):
                                        cwe_data["technology"] = ["database_server"]

                        elif (grandchild.tag == "{http://cwe.mitre.org/cwe-6}Operating_System"):
                            for attrib in grandchild.attrib:
                                if(attrib == "Class"):
                                    if(grandchild.attrib[attrib] == "Unix"):
                                        cwe_data["os"] = ["linux"]
                                    elif(grandchild.attrib[attrib] == "Windows"):
                                        cwe_data["os"] = ["windows"]
                                    elif (grandchild.attrib[attrib] == "macOS"):
                                        cwe_data["os"] = ["mac"]
                                    elif (grandchild.attrib[attrib] == "OS-Independent"):
                                        cwe_data["os"] = ["linux", "mac", "windows"]

            self.cwe_list[cwe_data["id"]] = dict(cwe_data)

        return self.cwe_list

    def parseNVD(self, path):
        """Parse NVD xml files to extract relevant informations"""
        nvd_data = {}
        files = self.getDirFiles(path)
        for file in files:
            print("open " + str(file))
            with open(file) as json_data:
                nvd_data = json.load(json_data)["CVE_Items"]
                nvd_data_len = len(nvd_data)
                for i in range(nvd_data_len):
                    cve_data = {"id": "", "publish_date": "", "last_update_date": "", "description": "", "base_score_v3": "",
                                "temporal_score_v3": "", "exploitability_score_v3": "", "impact_score_v3": "", "base_score_v2": "",
                                "temporal_score_v2": "", "exploitability_score_v2": "", "impact_score_v2": "", "attack_vector": "",
                                "attack_complexity": "", "privileges_required": "", "user_interaction": "", "scope": "",
                                "access_vector": "", "access_complexity": "", "authentication": "", "confidentiality_impact_v3": "",
                                "integrity_impact_v3": "", "availability_impact_v3": "", "confidentiality_impact_v2": "",
                                "integrity_impact_v2": "", "availability_impact_v2": "", "exploit_code_maturity": "",
                                "remediation_level_v3": "", "report_confidence_v3": "", "exploitability": "", "remediation_level_v2": "",
                                "report_confidence_v2": "", "gained_access": "", "vector": "", "cwe_id": "", "language": [],
                                "product_type": [], "vulnerability_type": []}



                    cve_data["id"] = nvd_data[i]["cve"]["CVE_data_meta"]["ID"]

                    cve_data["publish_date"] = nvd_data[i]["publishedDate"].split("T")[0]

                    cve_data["last_update_date"] = nvd_data[i]["lastModifiedDate"].split("T")[0]

                    cve_data["description"] = nvd_data[i]["cve"]["description"]["description_data"][0]["value"]

                    try:
                        cve_data["base_score_v3"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["baseScore"]
                    except:
                        pass

                    try:
                        cve_data["base_score_v2"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["baseScore"]
                    except:
                        pass



                    try:
                        cve_data["exploitability_score_v3"] = nvd_data[i]["impact"]["baseMetricV3"]["exploitabilityScore"]
                    except:
                        pass

                    try:
                        cve_data["exploitability_score_v2"] = nvd_data[i]["impact"]["baseMetricV2"]["exploitabilityScore"]
                    except:
                        pass



                    try:
                        cve_data["impact_score_v3"] = nvd_data[i]["impact"]["baseMetricV3"]["impactScore"]
                    except:
                        pass

                    try:
                        cve_data["impact_score_v2"] = nvd_data[i]["impact"]["baseMetricV2"]["impactScore"]
                    except:
                        pass



                    try:
                        cve_data["attack_vector"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["attackVector"].lower()
                    except:
                        pass
                    """
                    if (cve_data["attack_vector"] == "NETWORK"):
                        cve_data["attack_vector"] = "network"
                    elif (cve_data["attack_vector"] == "ADJACENT_NETWORK"):
                        cve_data["attack_vector"] = "adjacent"
                    elif (cve_data["attack_vector"] == "LOCAL"):
                        cve_data["attack_vector"] = "local"
                    elif (cve_data["attack_vector"] == "PHYSICAL"):
                        cve_data["attack_vector"] = "physical"
                    """

                    try:
                        cve_data["access_vector"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["accessVector"].lower()
                    except:
                        pass

                    """
                    if (cve_data["access_vector"] == "NETWORK"):
                        cve_data["access_vector"] = "network"
                    elif (cve_data["access_vector"] == "ADJACENT_NETWORK"):
                        cve_data["access_vector"] = "adjacent"
                    elif (cve_data["access_vector"] == "LOCAL"):
                        cve_data["access_vector"] = "local"
                    """



                    try:
                        cve_data["attack_complexity"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["attackComplexity"].lower()
                    except:
                        pass

                    try:
                        cve_data["access_complexity"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["accessComplexity"].lower()
                    except:
                        pass



                    try:
                        cve_data["privileges_required"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["privilegesRequired"].lower()
                    except:
                        pass

                    try:
                        cve_data["authentication"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["authentication"].lower()
                    except:
                        pass



                    try:
                        cve_data["user_interaction"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["userInteraction"]
                    except:
                        try:
                            cve_data["user_interaction"] = nvd_data[i]["impact"]["baseMetricV2"]["userInteractionRequired"]
                        except:
                            cve_data["user_interaction"] = ""

                    if (cve_data["user_interaction"] == True or cve_data["user_interaction"] == "REQUIRED"):
                        cve_data["user_interaction"] = "required"
                    elif (cve_data["user_interaction"] == False or cve_data["user_interaction"] == "NONE"):
                        cve_data["user_interaction"] = "none"

                    try:
                        cve_data["scope"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["scope"].lower()
                    except:
                        pass



                    try:
                        cve_data["confidentiality_impact_v3"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["confidentialityImpact"].lower()
                    except:
                        pass

                    try:
                        cve_data["confidentiality_impact_v2"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["confidentialityImpact"].lower()
                    except:
                        pass



                    try:
                        cve_data["integrity_impact_v3"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["integrityImpact"].lower()
                    except:
                        pass

                    try:
                        cve_data["integrity_impact_v2"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["integrityImpact"].lower()
                    except:
                        pass



                    try:
                        cve_data["availability_impact_v3"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["availabilityImpact"].lower()
                    except:
                        pass

                    try:
                        cve_data["availability_impact_v2"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["availabilityImpact"].lower()
                    except:
                        pass



                    try:
                        cve_data["vector"] = nvd_data[i]["impact"]["baseMetricV3"]["cvssV3"]["vectorString"]
                    except:
                        pass

                    try:
                        cve_data["vector"] = nvd_data[i]["impact"]["baseMetricV2"]["cvssV2"]["vectorString"]
                    except:
                        pass



                    try:
                        if (not nvd_data[i]["impact"]["baseMetricV2"]["obtainAllPrivilege"]):
                            if (not nvd_data[i]["impact"]["baseMetricV2"]["obtainUserPrivilege"]):
                                if (not nvd_data[i]["impact"]["baseMetricV2"]["obtainOtherPrivilege"]):
                                    cve_data["gained_access"] = "none"
                                else:
                                    cve_data["gained_access"] = "other"
                            else:
                                cve_data["gained_access"] = "user"
                        else:
                            cve_data["gained_access"] = "admin"
                    except:
                        cve_data["gained_access"] = "none"



                    try:
                        cve_data["cwe_id"] = nvd_data[i]["cve"]["problemtype"]["problemtype_data"][0]["description"][0]["value"]
                    except:
                        cve_data["cwe_id"] = ""

                    if(cve_data["cwe_id"] == "NVD-CWE-Other" or cve_data["cwe_id"] == "NVD-CWE-noinfo"):
                        cve_data["cwe_id"] = ""

                    self.cve_list[cve_data["id"]] = dict(cve_data)

        return self.cve_list



    def parseCVEDetails(self, path):
        """Parse CVE details text files to extract relevant informations"""
        authentication_expression = r"(^   Authentication )"
        access_complexity_expression = r"(^   Access Complexity )"
        vulnerability_type_expression = r"(^   Vulnerability Type\(s\) )"
        product_expression = r"(^   [1-9]+ )"
        gained_access_expression = r"(^   Gained Access )"

        files = self.getDirFiles(path)
        for file in files:
            cve_id = file.split("/")[-1].split(".")[0]

            if(not (cve_id in self.cve_list)):
                print(cve_id + " is not present in NVD")
                continue

            fd = open(file, "r")
            data = fd.read()
            lines = re.sub(r'\n(   )([a-z])', r'\1\2', data)
            lines = lines.split("\n")
            for line in lines:
                """
                if(re.search(authentication_expression, line) is not None):
                    if(re.search(r"Not required", line) is not None):
                        self.cve_list[cve_id]["authentication"] = "not_required"
                    elif(re.search(r"Single system", line) is not None):
                        self.cve_list[cve_id]["authentication"] = "single_system"
                    elif(re.search(r"Multiple systems", line) is not None):
                        self.cve_list[cve_id]["authentication"] = "multiple_systems"

                if(re.search(access_complexity_expression, line) is not None):
                    if(re.search(r"Low", line) is not None):
                        self.cve_list[cve_id]["access_complexity"] = "low"
                    elif(re.search(r"Medium", line) is not None):
                        self.cve_list[cve_id]["access_complexity"] = "medium"
                    elif(re.search(r"High", line) is not None):
                        self.cve_list[cve_id]["access_complexity"] = "high"
                """
                if(re.search(vulnerability_type_expression, line) is not None):
                    if(re.search(r"Denial Of Service", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["dos"]
                    if(re.search(r"Cross Site Scripting", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["xss"]
                    if(re.search(r"Gain privileges", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["gain_privileges"]
                    if(re.search(r"Execute Code", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["code_execution"]
                    if(re.search(r"Sql Injection", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["sql_injection"]
                    if(re.search(r"CSRF", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["csrf"]
                    if(re.search(r"Bypass a restriction", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["bypass_something"]
                    if(re.search(r"Overflow", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["overflow"]
                    if(re.search(r"Memory", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["memory_corruption"]
                    if(re.search(r"Directory traversal", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["directory_traversal"]
                    if(re.search(r"Http response splitting", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["http_response_splitting"]
                    if(re.search(r"Obtain Information", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["gain_information"]
                    if(re.search(r"File Inclusion", line) is not None):
                        self.cve_list[cve_id]["vulnerability_type"] += ["file_inclusion"]

                if(re.search(product_expression, line) is not None):
                    product = line.split(" ")
                    if(product[4] == "OS"):
                        self.cve_list[cve_id]["product_type"] += ["os"]
                    elif(product[4] == "Application"):
                        self.cve_list[cve_id]["product_type"] += ["application"]
                    elif(product[4] == "Hardware"):
                        self.cve_list[cve_id]["product_type"] += ["hardware"]

                if(re.search(gained_access_expression, line) is not None):
                    if (re.search(r"None", line) is not None):
                        self.cve_list[cve_id]["gained_access"] = "none"
                    elif (re.search(r"User", line) is not None):
                        self.cve_list[cve_id]["gained_access"] = "user"
                    elif (re.search(r"Admin", line) is not None):
                        self.cve_list[cve_id]["gained_access"] = "admin"

    def feedDatabase(self):
        """Fill the MYSQL database with informations precedently extracted"""

        print("Database feeding")

        mydb = mysql.connector.connect(
            host="localhost",
            user="phpmyadm",
            passwd="QRBIhj_ojXoUuzTS65vH",
            database="rpc"
        )

        cve_canceled = 0

        for cve_id in self.cve_list.keys():
            for key in self.cve_list[cve_id].keys():
                if(self.cve_list[cve_id][key] == ""):
                    self.cve_list[cve_id][key] = None



        mycursor = mydb.cursor()

        for cwe in self.cwe_list.values():
            sql = "INSERT INTO cwe (id, name, description) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE name=%s, description=%s"
            val = (cwe["id"], cwe["name"], cwe["description"], cwe["name"], cwe["description"])
            mycursor.execute(sql, val)

            mydb.commit()

            for language in cwe["language"]:
                sql = "INSERT INTO language_cwe (cwe_id, language) VALUES (%s, %s) ON DUPLICATE KEY UPDATE language=%s"
                val = (cwe["id"], language, language)
                mycursor.execute(sql, val)

                mydb.commit()

            for paradigm in cwe["paradigm"]:
                sql = "INSERT INTO paradigm (cwe_id, paradigm) VALUES (%s, %s) ON DUPLICATE KEY UPDATE paradigm=%s"
                val = (cwe["id"], paradigm, paradigm)
                mycursor.execute(sql, val)

                mydb.commit()

            for technology in cwe["technology"]:
                sql = "INSERT INTO technology (cwe_id, technology) VALUES (%s, %s) ON DUPLICATE KEY UPDATE technology=%s"
                val = (cwe["id"], technology, technology)
                mycursor.execute(sql, val)

                mydb.commit()

            for os in cwe["os"]:
                sql = "INSERT INTO os (cwe_id, os) VALUES (%s, %s) ON DUPLICATE KEY UPDATE os=%s"
                val = (cwe["id"], os, os)
                mycursor.execute(sql, val)

                mydb.commit()





        for cve in self.cve_list.values():
            sql = "INSERT INTO cve (id, publish_date, last_update, description, base_score_v3, temporal_score_v3, exploitability_score_v3, " \
                  "impact_score_v3, base_score_v2, temporal_score_v2, exploitability_score_v2, impact_score_v2, attack_vector, " \
                  "attack_complexity, privileges_required, user_interaction, scope, access_vector, access_complexity, authentication, " \
                  "confidentiality_impact_v3, integrity_impact_v3, availability_impact_v3, confidentiality_impact_v2, integrity_impact_v2, " \
                  "availability_impact_v2, exploit_code_maturity, remediation_level_v3, report_confidence_v3, exploitability, " \
                  "remediation_level_v2, report_confidence_v2, gained_access, vector, cwe_id )" \
                  " VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) ON DUPLICATE" \
                  " KEY UPDATE publish_date=%s, last_update=%s, description=%s, base_score_v3=%s, temporal_score_v3=%s, exploitability_score_v3=%s, " \
                  "impact_score_v3=%s, base_score_v2=%s, temporal_score_v2=%s, exploitability_score_v2=%s, impact_score_v2=%s, attack_vector=%s, " \
                  "attack_complexity=%s, privileges_required=%s, user_interaction=%s, scope=%s, access_vector=%s, access_complexity=%s, authentication=%s, " \
                  "confidentiality_impact_v3=%s, integrity_impact_v3=%s, availability_impact_v3=%s, confidentiality_impact_v2=%s, integrity_impact_v2=%s, " \
                  "availability_impact_v2=%s, exploit_code_maturity=%s, remediation_level_v3=%s, report_confidence_v3=%s, exploitability=%s, " \
                  "remediation_level_v2=%s, report_confidence_v2=%s, gained_access=%s, vector=%s, cwe_id=%s "

            val = (cve["id"], cve["publish_date"], cve["last_update_date"], cve["description"], cve["base_score_v3"],
                   cve["temporal_score_v3"], cve["exploitability_score_v3"], cve["impact_score_v3"], cve["base_score_v2"],
                   cve["temporal_score_v2"], cve["exploitability_score_v2"], cve["impact_score_v2"], cve["attack_vector"],
                   cve["attack_complexity"], cve["privileges_required"], cve["user_interaction"], cve["scope"],
                   cve["access_vector"], cve["access_complexity"], cve["authentication"], cve["confidentiality_impact_v3"], cve["integrity_impact_v3"],
                   cve["availability_impact_v3"], cve["confidentiality_impact_v2"], cve["integrity_impact_v2"], cve["availability_impact_v2"],
                   cve["exploit_code_maturity"],
                   cve["remediation_level_v3"], cve["report_confidence_v3"], cve["exploitability"], cve["remediation_level_v2"],
                   cve["report_confidence_v2"], cve["gained_access"], cve["vector"], cve["cwe_id"],
                   cve["publish_date"], cve["last_update_date"], cve["description"], cve["base_score_v3"],
                   cve["temporal_score_v3"], cve["exploitability_score_v3"], cve["impact_score_v3"], cve["base_score_v2"],
                   cve["temporal_score_v2"], cve["exploitability_score_v2"], cve["impact_score_v2"], cve["attack_vector"],
                   cve["attack_complexity"], cve["privileges_required"], cve["user_interaction"], cve["scope"],
                   cve["access_vector"], cve["access_complexity"], cve["authentication"], cve["confidentiality_impact_v3"], cve["integrity_impact_v3"],
                   cve["availability_impact_v3"], cve["confidentiality_impact_v2"], cve["integrity_impact_v2"], cve["availability_impact_v2"],
                   cve["exploit_code_maturity"],
                   cve["remediation_level_v3"], cve["report_confidence_v3"], cve["exploitability"], cve["remediation_level_v2"],
                   cve["report_confidence_v2"], cve["gained_access"], cve["vector"], cve["cwe_id"])
            try:
                mycursor.execute(sql, val)
                mydb.commit()
            except mysql.connector.Error as err:
                if (cve["cwe_id"] != None and cve["cwe_id"] != "" and err.errno == 1452):
                    #print(cve["cwe_id"] + " is not valid!\n" + cve["id"] + " will be added in database without CWE.")
                    cve["cwe_id"] = None
                    val = (
                    cve["id"], cve["publish_date"], cve["last_update_date"], cve["description"], cve["base_score_v3"],
                    cve["temporal_score_v3"], cve["exploitability_score_v3"], cve["impact_score_v3"],
                    cve["base_score_v2"],
                    cve["temporal_score_v2"], cve["exploitability_score_v2"], cve["impact_score_v2"],
                    cve["attack_vector"],
                    cve["attack_complexity"], cve["privileges_required"], cve["user_interaction"], cve["scope"],
                    cve["access_vector"], cve["access_complexity"], cve["authentication"],
                    cve["confidentiality_impact_v3"], cve["integrity_impact_v3"],
                    cve["availability_impact_v3"], cve["confidentiality_impact_v2"], cve["integrity_impact_v2"],
                    cve["availability_impact_v2"],
                    cve["exploit_code_maturity"],
                    cve["remediation_level_v3"], cve["report_confidence_v3"], cve["exploitability"],
                    cve["remediation_level_v2"],
                    cve["report_confidence_v2"], cve["gained_access"], cve["vector"], cve["cwe_id"],
                    cve["publish_date"], cve["last_update_date"], cve["description"], cve["base_score_v3"],
                    cve["temporal_score_v3"], cve["exploitability_score_v3"], cve["impact_score_v3"],
                    cve["base_score_v2"],
                    cve["temporal_score_v2"], cve["exploitability_score_v2"], cve["impact_score_v2"],
                    cve["attack_vector"],
                    cve["attack_complexity"], cve["privileges_required"], cve["user_interaction"], cve["scope"],
                    cve["access_vector"], cve["access_complexity"], cve["authentication"],
                    cve["confidentiality_impact_v3"], cve["integrity_impact_v3"],
                    cve["availability_impact_v3"], cve["confidentiality_impact_v2"], cve["integrity_impact_v2"],
                    cve["availability_impact_v2"],
                    cve["exploit_code_maturity"],
                    cve["remediation_level_v3"], cve["report_confidence_v3"], cve["exploitability"],
                    cve["remediation_level_v2"],
                    cve["report_confidence_v2"], cve["gained_access"], cve["vector"], cve["cwe_id"])
                    try:
                        mycursor.execute(sql, val)
                        mydb.commit()
                    except:
                        print("Error adding " + cve["id"])
                        print(sql % val)
                        print(err)
                        print("Error Code:", err.errno)
                        print("SQLSTATE", err.sqlstate)
                        print("Message", err.msg)
                else:
                    print("Error adding " + cve["id"])
                    print(sql % val)
                    print(err)
                    print("Error Code:", err.errno)
                    print("SQLSTATE", err.sqlstate)
                    print("Message", err.msg)
                continue

        for cve in self.cve_list.values():
            try:
                for product in cve["product_type"]:
                    sql = "INSERT INTO product_type (cve_id, product_type) VALUES (%s, %s) ON DUPLICATE KEY UPDATE product_type=%s"
                    val = (cve["id"], product, product)
                    mycursor.execute(sql, val)

                    mydb.commit()

                for vulnerability in cve["vulnerability_type"]:
                    sql = "INSERT INTO vulnerability_type (cve_id, vulnerability_type) VALUES (%s, %s) ON DUPLICATE KEY UPDATE vulnerability_type=%s"
                    val = (cve["id"], vulnerability, vulnerability)
                    mycursor.execute(sql, val)

                    mydb.commit()
            except:
                if (cve["id"] != None):
                    print(cve["id"] + " doesn't exist in database!")
                    cve_canceled += 1
                continue

        print(str(cve_canceled) + " CVE have been canceled!")

if __name__ == "__main__":
    database = DatabaseFeeder()
    cwe_list = database.parseCWE("../mitre/data/mitre_cwe.xml")
    cve_list = database.parseNVD("../nvd/data")
    #cve_list = database.parseCVEDetails("../../cvedetails/data")
    database.feedDatabase()
    #print(parser.cwe)
    #print(parser.cve)
